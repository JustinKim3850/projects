---
# win_recon_playbook.yml
# Deploys and runs WinReconReporter.ps1 on Windows targets.
# Adds custom checks for specified processes and services.
# All results are saved in C:\Users\<User>\Downloads\WinReconReport_<timestamp>.txt

- name: Run WinReconReporter on Windows targets
  hosts: win_targets
  gather_facts: no
  vars:
    # Where the script will be placed remotely
    remote_script_dir: C:\Temp\winrecon
    ps_script: WinReconReporter.ps1

    # Lists to search (edit or pass in at runtime with -e)
    process_list: "notepad,cmd,msedge"
    service_list: "WinRM,Spooler,vmcompute"

  tasks:

    - name: Ensure temp directory exists on remote host
      ansible.windows.win_file:
        path: "{{ remote_script_dir }}"
        state: directory

    - name: Copy PowerShell recon script to target
      ansible.windows.win_copy:
        src: "{{ ps_script }}"
        dest: "{{ remote_script_dir }}\\{{ ps_script }}"
        force: yes

    - name: Run WinReconReporter.ps1 on remote host
      ansible.windows.win_shell:
        args:
          executable: powershell.exe
        chdir: "{{ remote_script_dir }}"
        cmd: >
          powershell.exe -NoProfile -ExecutionPolicy Bypass
          -File "{{ remote_script_dir }}\\{{ ps_script }}"
          -ProcessList "{{ process_list }}"
      register: recon_result
      async: 0
      poll: 600

    - name: Confirm script execution
      debug:
        msg: "{{ recon_result.stdout_lines }}"

    - name: Search for specific Windows services
      ansible.windows.win_shell:
        args:
          executable: powershell.exe
        cmd: >
          $names = "{{ service_list }}".Split(',') | ForEach-Object { $_.Trim() } | Where-Object { $_ -ne '' };
          $results = @()
          foreach ($s in $names) {
            $svc = Get-Service -Name $s -ErrorAction SilentlyContinue
            if ($svc) {
              $results += "Service '$s' FOUND - Status: $($svc.Status) - StartType: $($svc.StartType)"
            } else {
              $results += "Service '$s' NOT FOUND or not installed"
            }
          }
          $user = [Environment]::UserName
          $downloads = "C:\Users\$user\Downloads\service_check.txt"
          $results | Out-File -FilePath $downloads -Encoding UTF8
          Write-Output "Service check saved to $downloads"
      register: service_check_result
      failed_when: false

    - name: Show service check result
      debug:
        msg: "{{ service_check_result.stdout_lines }}"
